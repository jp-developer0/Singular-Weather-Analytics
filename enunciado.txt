Weather Data Scraping Exercise
Programming Exercise: Web Scraping, Data Processing, and CSV Export

Objective: Scrape data from a public API or website, process the data using pandas , and export the processed data to a CSV file.
Instructions:

1. Scrape Public Data
Use the Open-Meteo API ( https://open-meteo.com/en/docs ) to retrieve current weather data (temperature, wind speed, humidity) for a list of cities. You will need to:
Use the requests library to call the API.
Fetch weather data (temperature, wind speed, humidity) for at least 10 cities
The API requires to provide latitude and longitude for each city, bonus question is to use external API to get the lat/long from city
name but for starting please use the attached cities dict.
2. Data Processing
Using the pandas library:
Create a DataFrame from the collected data.
Calculate additional fields like:
Temperature in Fahrenheit if the API returns it in Celsius.
Wind speed in miles per hour if the API returns it in meters per second.
Filter or rank cities based on specific criteria (e.g., highest temperature or lowest humidity).
3. Export to CSV
Export the processed DataFrame to a CSV file named weather_data.csv .

Requirements:
Use third-party libraries:
requests for API calls
pandas for data manipulation
(Optional) dotenv to manage API keys securely

Program structure:
The program should:
a. Accept user input for cities (a predefined list can also be used for simplicity).
b. Retrieve weather data for these cities.
c. Process and display the data.
d. Save the processed data as a CSV.

Example Output:
A CSV file weather_data.csv containing:

(see the image output.png)

Submission:
Code: Submit the Python script.
CSV Output: Include the generated CSV file.
Documentation: Add comments explaining key parts of the code.
README: Write a brief README on how to run the script and interpret the output.
Finally:
Visualize the data using matplotlib or seaborn (e.g., bar chart of temperatures).
Serve the Graphs via HTTP Endpoints:
Using a web framework like FastAPI or Flask , create endpoints to:
Serve the visualized graphs as images or plots.
Provide the CSV file for download.
Attached City List

cities = [
{"City": "New York", "Latitude": 40.7128, "Longitude": -74.0060},
{"City": "Tokyo", "Latitude": 35.6895, "Longitude": 139.6917},
{"City": "London", "Latitude": 51.5074, "Longitude": -0.1278},
{"City": "Paris", "Latitude": 48.8566, "Longitude": 2.3522},
{"City": "Berlin", "Latitude": 52.5200, "Longitude": 13.4050},
{"City": "Sydney", "Latitude": -33.8688, "Longitude": 151.2093},
{"City": "Mumbai", "Latitude": 19.0760, "Longitude": 72.8777},
{"City": "Cape Town", "Latitude": -33.9249, "Longitude": 18.4241},
{"City": "Moscow", "Latitude": 55.7558, "Longitude": 37.6173},
{"City": "Rio de Janeiro", "Latitude": -22.9068, "Longitude": -43.1729}
]